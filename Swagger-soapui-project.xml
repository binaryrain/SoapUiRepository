<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="ca82c580-a72f-4ba6-be30-4328684983a6" activeEnvironment="Default" name="Swagger" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="ff1b2282-0f7d-4688-9361-d620b84951a0" wadlVersion="http://wadl.dev.java.net/2009/02" name="Swagger Petstore" type="rest" basePath="/v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://petstore.swagger.io</con:endpoint></con:endpoints><con:resource name="/pet" path="/pet" id="4a4b88b1-ec43-4712-8c8b-69b143858c09"><con:settings/><con:parameters/><con:method name="addPet" id="d61fb797-5567-4184-9dfe-e52d97e749ed" method="POST"><con:description>
Add a new pet to the store</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>405 200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="a6792d24-e99e-4c11-b407-b57683476a35" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="updatePet" id="276a144b-aafb-4482-9314-120344db1030" method="PUT"><con:description>
Update an existing pet</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400 200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="378e9bc0-8a3c-40c6-8895-b31d0ca26394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request>{
   "id": 777,
   "category":    {
      "id": 0,
      "name": "cat"
   },
   "name": "cute cattie",
   "photoUrls": ["string"],
   "tags": [   {
      "id": 0,
      "name": "string"
   }],
   "status": "available"
}</con:request><con:originalUri>http://petstore.swagger.io/v2/pet</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/pet/findByStatus" path="/pet/findByStatus" id="758cd0ec-0bb4-4c39-a323-c780a6df8631"><con:settings/><con:parameters/><con:method name="findPetsByStatus" id="6d9841a1-169b-4b0e-a81c-037859dcfd59" method="GET"><con:description>Multiple status values can be provided with comma separated strings
Finds Pets by status</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>status</con:name><con:style>QUERY</con:style><con:description>Status values that need to be considered for filter</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="b16aa495-0c99-4d6d-9422-ee63cba538f3" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/pet/findByTags" path="/pet/findByTags" id="ff603e53-d278-4a33-abe7-0ecfdc9e07df"><con:settings/><con:parameters/><con:method name="findPetsByTags" id="08a34674-d93d-445d-a5cc-309594b39223" method="GET"><con:description>Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
Finds Pets by tags</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>tags</con:name><con:style>QUERY</con:style><con:description>Tags to filter by</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="bb8e4a6c-60b1-4522-befe-b0463ab52642" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/pet/{petId}" path="/pet/{petId}" id="99789319-a984-4b9d-a0ad-555493c588c8"><con:settings/><con:parameters><con:parameter><con:name>username</con:name><con:style>HEADER</con:style></con:parameter><con:parameter><con:name>password</con:name><con:style>HEADER</con:style></con:parameter></con:parameters><con:method name="getPetById" id="2e4d8b13-f2b9-4f6c-8959-a39b1ba9b9aa" method="GET"><con:description>Returns a single pet
Find pet by ID</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>petId</con:name><con:style>TEMPLATE</con:style><con:description>ID of pet to return</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://petstore.swagger.io/v2/pet/777">ns:Fault</con:element></con:representation><con:request name="Request 1" id="d7725d19-d0cc-44c9-9be4-60dc147fbd0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/777</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="petId" value="777" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>petId</con:entry></con:parameterOrder></con:request></con:method><con:method name="updatePetWithForm" id="42074a7d-836c-4d4d-a39f-bac4e14f13cc" method="PUT"><con:description>
Updates a pet in the store with form data</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>petId</con:name><con:style>TEMPLATE</con:style><con:description>ID of pet that needs to be updated</con:description></con:parameter><con:parameter><con:name>name</con:name><con:style>QUERY</con:style><con:description>Updated name of the pet</con:description></con:parameter><con:parameter><con:name>status</con:name><con:style>QUERY</con:style><con:description>Updated status of the pet</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>405</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>415</con:status><con:params/><con:element>apiResponse</con:element></con:representation><con:request name="Request 1" id="9c8e89a0-529d-4915-a869-5ae13d8798ed" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>petId</con:entry><con:entry>name</con:entry><con:entry>status</con:entry></con:parameterOrder></con:request></con:method><con:method name="deletePet" id="e4d66b2b-3f65-489b-b536-e1b75e7f3af1" method="DELETE"><con:description>
Deletes a pet</con:description><con:settings/><con:parameters><con:parameter><con:name>api_key</con:name><con:style>HEADER</con:style><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>petId</con:name><con:style>TEMPLATE</con:style><con:description>Pet id to delete</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400 200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="3e53d032-3a33-4773-95f4-95160a06c76d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/777</con:originalUri><con:credentials><con:username>ketan</con:username><con:password>sdjnognjtitj</con:password><con:selectedAuthProfile>Profile 1</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>OAuth 2.0</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="petId" value="777"/>
  <con:entry key="api_key" value="12345677"/>
</con:parameters><con:parameterOrder><con:entry>api_key</con:entry><con:entry>petId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/pet/{petId}/uploadImage" path="/pet/{petId}/uploadImage" id="a48ebd5e-97ef-40ba-83fa-ed15d855328f"><con:settings/><con:parameters/><con:method name="uploadFile" id="56b86cec-a5ef-467d-9144-c487b61fcd2f" method="POST"><con:description>
uploads an image</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>petId</con:name><con:style>TEMPLATE</con:style><con:description>ID of pet to update</con:description></con:parameter><con:parameter><con:name>additionalMetadata</con:name><con:style>QUERY</con:style><con:description>Additional data to pass to server</con:description></con:parameter><con:parameter><con:name>file</con:name><con:style>QUERY</con:style><con:description>file to upload</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>multipart/form-data</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="c3836885-bd1a-482f-8a96-71d1d90f3bbb" mediaType="multipart/form-data" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/999/uploadImage</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:attachment><con:name>brothers.jpg</con:name><con:contentType>image/jpeg</con:contentType><con:size>46543</con:size><con:contentId>brothers.jpg</con:contentId><con:data></con:data><con:id>4b012e97-b2f8-4fea-9dd5-dca9ab61dd99</con:id></con:attachment><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="petId" value="999"/>
  <con:entry key="file" value="brothers.jpg"/>
  <con:entry key="additionalMetadata" value="image/jpeg"/>
</con:parameters></con:request></con:method></con:resource><con:resource name="/store/inventory" path="/store/inventory" id="44991633-f224-412f-baf0-df3b06a51eb7"><con:settings/><con:parameters/><con:method name="getInventory" id="3617656c-98fe-400a-9ba6-ff9551694f7a" method="GET"><con:description>Returns a map of status codes to quantities
Returns pet inventories by status</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="2e69d4db-4cc4-439e-aa35-0b605f04822b" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/store/order" path="/store/order" id="02ee88d9-6e79-4305-ab57-8b81ddce3996"><con:settings/><con:parameters/><con:method name="placeOrder" id="d3acdc1e-f154-4305-b7c8-04779cd21dff" method="POST"><con:description>
Place an order for a pet</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="74d78324-c70b-463b-a1b1-94e3a7643155" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/store/order/{orderId}" path="/store/order/{orderId}" id="190602fe-3ae6-4c0b-9d17-bce67b4478f3"><con:settings/><con:parameters/><con:method name="getOrderById" id="e293bdf5-92d5-451b-9bd6-c72ec0eec846" method="GET"><con:description>For valid response try integer IDs with value >= 1 and &lt;= 10. Other values will generated exceptions
Find purchase order by ID</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>orderId</con:name><con:style>TEMPLATE</con:style><con:description>ID of pet that needs to be fetched</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="cfc5aa8c-70b3-4e00-b1dd-d512335f5410" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="deleteOrder" id="4a094481-7035-40f6-bf5f-3ff7b8b1ccce" method="DELETE"><con:description>For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
Delete purchase order by ID</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>orderId</con:name><con:style>TEMPLATE</con:style><con:description>ID of the order that needs to be deleted</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="45500a7c-3a4e-47d0-ba53-d7528282f50a" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user" path="/user" id="8177dd31-4697-43f4-812a-f3fc35f686aa"><con:settings/><con:parameters/><con:method name="createUser" id="4349ec7c-c053-4cfd-88af-0bcd684520c7" method="POST"><con:description>This can only be done by the logged in user.
Create user</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status/><con:params/></con:representation><con:request name="Request 1" id="ca92b813-70e8-4eb8-9189-6287a52ed1f4" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/createWithArray" path="/user/createWithArray" id="ab8f3790-631f-4944-9f7e-12be9119d26f"><con:settings/><con:parameters/><con:method name="createUsersWithArrayInput" id="659c00bd-f99e-4e17-8185-6f078622e3d7" method="POST"><con:description>
Creates list of users with given input array</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status/><con:params/></con:representation><con:request name="Request 1" id="794dc760-f9e5-4050-a207-1266179ef1c2" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/createWithList" path="/user/createWithList" id="03f20ea6-c191-45d9-8dea-969c7651e670"><con:settings/><con:parameters/><con:method name="createUsersWithListInput" id="e256f8eb-d074-4583-972f-c84b3527ec13" method="POST"><con:description>
Creates list of users with given input array</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status/><con:params/></con:representation><con:request name="Request 1" id="1bd527d6-ea4e-4a12-8069-21581cf0cde7" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/login" path="/user/login" id="5df7cd91-9c69-4ca4-965e-a0720a0e267a"><con:settings/><con:parameters/><con:method name="loginUser" id="2fb75ae8-f195-4606-8fb5-681bb10fe3b8" method="GET"><con:description>
Logs user into the system</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:style>QUERY</con:style><con:description>The user name for login</con:description></con:parameter><con:parameter required="true"><con:name>password</con:name><con:style>QUERY</con:style><con:description>The password for login in clear text</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:request name="Request 1" id="1e917ab6-2a87-4292-9ce5-3aca830b48e7" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/logout" path="/user/logout" id="1a31bec9-21b2-4d54-ad77-f7da2d137b08"><con:settings/><con:parameters/><con:method name="logoutUser" id="e72fec7a-6d7f-45e1-a19a-f60b112b8a7e" method="GET"><con:description>
Logs out current logged in user session</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status/><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status/><con:params/></con:representation><con:request name="Request 1" id="b65d950f-5a6a-4644-a8a5-e1291324d6ef" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/user/{username}" path="/user/{username}" id="49cb9096-ddf0-430d-a623-199334e23356"><con:settings/><con:parameters/><con:method name="getUserByName" id="fc58edc5-1371-4d60-beb3-68f134a3cc69" method="GET"><con:description>
Get user by user name</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:style>TEMPLATE</con:style><con:description>The name that needs to be fetched. Use user1 for testing. </con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="93107955-167e-491d-b4d1-a50e077b8f41" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="updateUser" id="18c2ab82-5c0d-465f-8dec-33dc7371281b" method="PUT"><con:description>This can only be done by the logged in user.
Updated user</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:style>TEMPLATE</con:style><con:description>name that need to be updated</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="35c92a9a-79b1-44b8-a58b-477762f4340e" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method><con:method name="deleteUser" id="f5381203-3226-4044-a20e-5aa382205400" method="DELETE"><con:description>This can only be done by the logged in user.
Delete user</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>username</con:name><con:style>TEMPLATE</con:style><con:description>The name that needs to be deleted</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="ef18fc6b-f907-48ce-9d01-6aa4b8f8fa49" mediaType="application/json"><con:settings/><con:endpoint>http://petstore.swagger.io</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:WsdlInterface" id="dab30309-bd88-4af4-9454-c267fa6f3703" wsaVersion="NONE" name="BLZServiceSOAP11Binding" type="wsdl" bindingName="{http://thomas-bayer.com/blz/}BLZServiceSOAP11Binding" soapVersion="1_1" anonymous="optional" definition="file:/C:/Users/ab42596/Desktop/BLZService.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/ab42596/Desktop/BLZService.wsdl"><con:part><con:url>file:/C:/Users/ab42596/Desktop/BLZService.wsdl</con:url><con:content><![CDATA[<wsdl:definitions targetNamespace="http://thomas-bayer.com/blz/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:tns="http://thomas-bayer.com/blz/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/">
  <wsdl:documentation>BLZService</wsdl:documentation>
  <wsdl:types>
    <xsd:schema attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://thomas-bayer.com/blz/">
      <xsd:element name="getBank" type="tns:getBankType"/>
      <xsd:element name="getBankResponse" type="tns:getBankResponseType"/>
      <xsd:complexType name="getBankType">
        <xsd:sequence>
          <xsd:element name="blz" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="getBankResponseType">
        <xsd:sequence>
          <xsd:element name="details" type="tns:detailsType"/>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="detailsType">
        <xsd:sequence>
          <xsd:element minOccurs="0" name="bezeichnung" type="xsd:string"/>
          <xsd:element minOccurs="0" name="bic" type="xsd:string"/>
          <xsd:element minOccurs="0" name="ort" type="xsd:string"/>
          <xsd:element minOccurs="0" name="plz" type="xsd:string"/>
        </xsd:sequence>
      </xsd:complexType>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="getBank">
    <wsdl:part name="parameters" element="tns:getBank"/>
  </wsdl:message>
  <wsdl:message name="getBankResponse">
    <wsdl:part name="parameters" element="tns:getBankResponse"/>
  </wsdl:message>
  <wsdl:portType name="BLZServicePortType">
    <wsdl:operation name="getBank">
      <wsdl:input message="tns:getBank"/>
      <wsdl:output message="tns:getBankResponse" wsaw:Action="http://thomas-bayer.com/blz/BLZService/getBankResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="BLZServiceSOAP11Binding" type="tns:BLZServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getBank">
      <soap:operation style="document" soapAction=""/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="BLZServiceSOAP12Binding" type="tns:BLZServicePortType">
    <soap12:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getBank">
      <soap12:operation style="document" soapAction=""/>
      <wsdl:input>
        <soap12:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap12:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:binding name="BLZServiceHttpBinding" type="tns:BLZServicePortType">
    <http:binding verb="POST"/>
    <wsdl:operation name="getBank">
      <http:operation location="BLZService/getBank"/>
      <wsdl:input>
        <mime:content part="getBank" type="text/xml"/>
      </wsdl:input>
      <wsdl:output>
        <mime:content part="getBank" type="text/xml"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="BLZService">
    <wsdl:port name="BLZServiceSOAP11port_http" binding="tns:BLZServiceSOAP11Binding">
      <soap:address location="http://www.thomas-bayer.com/axis2/services/BLZService"/>
    </wsdl:port>
    <wsdl:port name="BLZServiceSOAP12port_http" binding="tns:BLZServiceSOAP12Binding">
      <soap12:address location="http://www.thomas-bayer.com/axis2/services/BLZService"/>
    </wsdl:port>
    <wsdl:port name="BLZServiceHttpport" binding="tns:BLZServiceHttpBinding">
      <http:address location="http://www.thomas-bayer.com/axis2/services/BLZService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:8088/BLZLocalService</con:endpoint><con:endpoint>http://www.thomas-bayer.com/axis2/services/BLZService</con:endpoint></con:endpoints><con:operation id="638a1611-d467-408d-bc01-bad4595c2672" isOneWay="false" action="" name="getBank" bindingOperationName="getBank" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="fe86feba-1b56-4fae-9044-360c25cd98aa" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/BLZLocalService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <blz:getBank>\r
         <blz:blz>55010111</blz:blz>\r
      </blz:getBank>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:interface xsi:type="con:RestService" id="5977a74a-6864-4a5d-858a-975166512d25" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://maps.googleapis.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://maps.googleapis.com</con:endpoint></con:endpoints><con:resource name="Json" path="/maps/api/geocode/json" id="45919f08-e216-497f-af7b-7f8a59402a0c"><con:settings/><con:parameters><con:parameter><con:name>address</con:name><con:value>hyderabad</con:value><con:style>QUERY</con:style><con:default>hyderabad</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Json 1" id="2e5ab806-be13-4c81-9f31-01201f7c3963" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:json="http://maps.googleapis.com/maps/api/geocode/json">json:Response</con:element></con:representation><con:request name="Request 1" id="9f0e6e84-04f9-4dbf-908e-af08a4c13e3d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://maps.googleapis.com</con:endpoint><con:request/><con:originalUri>http://maps.googleapis.com/maps/api/geocode/json</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="address" value="hyderabad" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>address</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="bd3a14e1-ce04-41bc-b8c1-c1c4ec368693" name="TS01-Get Put Post Delete"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="9dfb3d49-b238-4d9d-a117-012592c729bb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01-Get Pet By ID" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="addPet" id="7c5a4186-c521-4960-be15-4d14d117c578"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet" methodName="addPet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="addPet" id="a6792d24-e99e-4c11-b407-b57683476a35" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request>{
  "id": 999,
  "category": {
    "id": 0,
    "name": "dog"
  },
  "name": "cute doggie",
  "photoUrls": [
    "string"
  ],
  "tags": [
    {
      "id": 0,
      "name": "string"
    }
  ],
  "status": "available"
}</con:request><con:originalUri>http://petstore.swagger.io/v2/pet</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="26506c7d-eb4a-453e-8aa3-4efb7e2fcd5a" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getPetById" id="21175a53-65e1-4b59-9d74-51f1adc93b2f"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet/{petId}" methodName="getPetById" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getPetById" id="d7725d19-d0cc-44c9-9be4-60dc147fbd0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/777</con:originalUri><con:assertion type="JsonPath Match" id="87df1714-6454-48c7-8750-afaa4c81fdfa" name="JsonPath Match"><con:configuration><path>$.</path><content>${addPet#Response#$.}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="petId" value="999" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>petId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updatePet" id="aaca93c7-481a-4f18-bfc2-e1d3d96b96f9"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet" methodName="updatePet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updatePet" id="378e9bc0-8a3c-40c6-8895-b31d0ca26394" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request>{
   "id": 999,
   "category":    {
      "id": 0,
      "name": "cat"
   },
   "name": "cute cattie",
   "photoUrls": ["string"],
   "tags": [   {
      "id": 0,
      "name": "string"
   }],
   "status": "available"
}</con:request><con:originalUri>http://petstore.swagger.io/v2/pet</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f4b5c8d3-18ec-49a4-9976-f4e49040e40d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getPetById - after update" id="694c8c0c-7c8a-4d89-a237-1d24073a1a82"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet/{petId}" methodName="getPetById" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getPetById - after update" id="d7725d19-d0cc-44c9-9be4-60dc147fbd0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/777</con:originalUri><con:assertion type="JsonPath Match" id="08bdba73-730e-4dc4-b28b-7304d0106eeb" name="JsonPath Match"><con:configuration><path>$.</path><content>${updatePet#Response#$.}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="petId" value="999" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>petId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="deletePet" id="9143fc7d-3df9-4cac-9bc8-1e320e4b9898"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet/{petId}" methodName="deletePet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="deletePet" id="3e53d032-3a33-4773-95f4-95160a06c76d" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/777</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b73d36b8-7ff3-4790-ad14-c0d70a2c3bdf" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="petId" value="999" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>api_key</con:entry><con:entry>petId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getPetById - after delete" id="f6b06c9a-082c-43de-b6fb-5d5fcdcb785d"><con:settings/><con:config service="Swagger Petstore" resourcePath="/v2/pet/{petId}" methodName="getPetById" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getPetById - after delete" id="d7725d19-d0cc-44c9-9be4-60dc147fbd0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://petstore.swagger.io</con:endpoint><con:request/><con:originalUri>http://petstore.swagger.io/v2/pet/777</con:originalUri><con:assertion type="JsonPath Match" id="467aeba9-89f4-4beb-b102-3349d577f7df" name="JsonPath Match"><con:configuration><path>$.message</path><content>Pet not found</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="petId" value="999" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>petId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="a8d8f96e-ef8a-419c-b01b-033583d16d0f" name="TS02-Groovy Basics"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6f1a30e4-969c-4d34-9dd4-f102fe6d8c1a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01-Groovy" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script-Goovy Basics" id="601e1636-100a-431f-aadf-5bc82ec9a947"><con:settings/><con:config><script>//variable declaration
def name
String firstName
String lastName
int age
int salary
String country

firstName= 'John'
lastName='Doe'
age=26
salary=900000
country='India'

log.info 'firstName = ' + firstName

firstName= 'Kumar'
log.info 'firstName = ' + firstName
log.info 'lastName = ' + lastName

log.warn age
log.error salary

log.info 'country'
log.info "$country"
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Conditions" id="b652cfb7-0a32-4e26-89b8-3464c3ffe798"><con:settings/><con:config><script>boolean 

//isPassed=true
isPassed=false

//i am passed in exam

if (isPassed == true)
{
log.info 'I got a Bike'}
else{
	log.info 'Better luck next time'
}
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Working with List" id="add64ecf-3df7-41f4-828a-02352e6a40fd"><con:settings/><con:config><script>def fruits=['Apple','Banana','Grapes','Orange']

log.info "$fruits"

//reading one by entry

fruits.each{
	fruitName -> 
	log.info "$fruitName"
}

String xFruit='Orange'
boolean isPresent=fruits.contains(xFruit)

log.info "$isPresent"

//Can i add a fruit @ runtime

fruits.add('Papaya')
fruits &lt;&lt; 'Pomegranate'


//Remove method

fruits.remove('Papaya')
log.info "$fruits"
</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Working with Maps" id="203f0f16-1fbb-44b6-9fc5-f469a145b8b2"><con:settings/><con:config><script>//how to define a map
def countries = ['IND':'India',
			'USA':'United States of America'
				,'SIN':'Singapore'
				,'RUS':'Russia']

String countryIamlookingFor='IND'

boolean foundCountry=countries.containsKey(countryIamlookingFor)

log.info "$foundCountry"
log.info countries.get(countryIamlookingFor)</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script- Assertions" id="7999f4b9-c966-47ca-84a2-b3703448144b"><con:settings/><con:config><script>String expectedName,actualName

expectedName='John'
actualName='Jhon'


log.info 'before assertion'
//assert expectedName == actualName
//Execution will halt at line 8
log.info 'after assertion'

def fruits=['Apple','Banana','Grapes','Orange']
assert true == fruits.contains('Orange')</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Reading Project Artifact" id="4871fea6-db4e-43cc-ba7b-0dff00f2513d"><con:settings/><con:config><script>//print TC name
log.info testRunner.testCase.name

//print TS name
log.info testRunner.testCase.testSuite.name

//print Project name
log.info testRunner.testCase.testSuite.project.name

//print Workspace name
log.info testRunner.testCase.testSuite.project.workspace.name

//print TC from other project name
log.info testRunner.testCase.testSuite.project.getTestSuiteByName('TS01-Get Put Post Delete').getTestCaseByName('TC01-Get Pet By ID').name


//loop through all test suite
def testSuiteMap= testRunner.testCase.testSuite.project.testSuites

testSuiteMap.each{
	tsEntry ->
	log.info tsEntry.key
}
log.info 'Done'
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="66097859-385f-4135-94ca-70303e1a9edf" name="TS03-Groovy Automation"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="6b0fd6b7-d138-4d03-a0b4-d2cc2d74beaa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01-Read XML Response using Groovy" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="66f7b3fe-b0a2-4d6f-9326-c39629c440e7"><con:settings/><con:config><script>import groovy.util.XmlSlurper

//i want to call test step

def testStepName= 'getBank - Request 1'

def testStep=testRunner.testCase.getTestStepByName(testStepName)

def response =testStep.run(testRunner,context)


def xmlSlurper=new XmlSlurper()

def xmlResponse=xmlSlurper.parseText(response.responseContentAsXml)

log.info xmlResponse

String expected ='ESSEDE5F550'
String actual=xmlResponse.Body.getBankResponse.details.bic


log.info "$actual"

assert expected == actual




	</script></con:config></con:testStep><con:testStep type="request" id="6c17936c-bcae-409a-91d4-9f79cc2a2112" name="getBank - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="getBank - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="0796870c-79e9-45de-bfe0-2cfdd10117b4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/BLZLocalService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <blz:getBank>\r
         <blz:blz>55010111</blz:blz>\r
      </blz:getBank>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="8e36259b-9b78-48e9-ba17-46211f9998bb" name="SOAP Response"/><con:assertion type="XPath Match" id="90a4a019-4a94-41bc-93be-ba46b6e21efc" name="XPath Match"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c9f200a1-e64f-4405-8e4d-9409ee7d491f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC02-Read Data From Text File" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script-Read Data From File" id="d28a95c3-47dc-4fb3-9f8a-17a75f2745ee"><con:settings/><con:config><script>def filePath = 'C:\\Users\\ab42596\\Desktop\\SoapUI Project\\blz-service-data.txt' //Note:Replace the file before executing
File file = new File(filePath)
//Loop through the content of file and pring them on log window.
def blz,bezeichnung,ort,plz,bic
file.eachLine{
	line->
	log.info line
	def lineData =  line.split(',')
	/**
	 * 55010111,SEB,ESSEDE5F550,Mainz a Rhein,55116
	 * lineData = ['55010111','SEB','ESSEDE5F550','Mainz a Rhein','55116']
	 */
	 blz= lineData[0] // blz code
	 bezeichnung = lineData[1]
	 bic = lineData[2]
	 ort = lineData[3]
	 plz =  lineData[4]
	 log.warn "blz = $blz , bezeichnung = $bezeichnung ,bic = $bic ,ort = $ort , plz = $plz"

}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="858dd7cd-e69a-42d3-9292-e5310d99cc19" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC03-Reading XML Request &amp; Response using Groovy" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy-end to end testing" id="80933907-13f6-4ebe-88dc-1aeead838efd"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils

//Read bank data from file
def filePath = 'C:\\Users\\ab42596\\Desktop\\SoapUI Project\\blz-service-data.txt' //Note:Replace the file before executing
def groovyUtils = new GroovyUtils(context)
def requestXmlHolder
def responseXmlHolder
String plzResponse

File file = new File(filePath)
def blz,bezeichnung,ort,plz,bic
file.eachLine{
	line->
	def lineData =  line.split(',')
	 blz= lineData[0] // blz code
	 bezeichnung = lineData[1]
	 bic = lineData[2]
	 ort = lineData[3]
	 plz =  lineData[4]
	// log.warn "blz = $blz , bezeichnung = $bezeichnung ,bic = $bic ,ort = $ort , plz = $plz"
	requestXmlHolder= groovyUtils.getXmlHolder("getBank#Request")
	requestXmlHolder["//blz:blz"]=blz
	requestXmlHolder.updateProperty()
	
	testRunner.testCase.getTestStepByName('getBank').run(testRunner,context)
	responseXmlHolder= groovyUtils.getXmlHolder("getBank#Response")
	plzResponse=responseXmlHolder["//ns1:plz"]

	log.info "$plzResponse"

}

	

</script></con:config></con:testStep><con:testStep type="request" id="69c35773-e0d0-45a2-bf11-ba271d1eceb0" name="getBank"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BLZServiceSOAP11Binding</con:interface><con:operation>getBank</con:operation><con:request name="getBank" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="66cf3e0e-90b2-453b-b2c3-e9296697c5d2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/BLZLocalService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:blz="http://thomas-bayer.com/blz/">
   <soapenv:Header/>
   <soapenv:Body>
      <blz:getBank>
         <blz:blz>55010424</blz:blz>
      </blz:getBank>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c0dcd36c-103a-4598-a948-0a0d324e8097" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://thomas-bayer.com/blz/BLZServicePortType/getBankRequest"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="03e6275a-9f8d-4dd3-a365-f2fa79eb9322" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC04-Read JSon Response using Groovy" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script" id="79e33c85-cb66-44dd-95ad-930e1f6cb585"><con:settings/><con:config><script>import groovy.json.JsonSlurper
def jsonSlurper=new JsonSlurper()

def response =context.expand('${searchLocation#Response}')

def locationData=jsonSlurper.parseText(response)

log.info locationData
log.info locationData.status

String lat=locationData.results[0].geometry.location.lat
String lag=locationData.results[0].geometry.location.lng

log.info "$lat"
log.info "$lag"



	</script></con:config></con:testStep><con:testStep type="restrequest" name="searchLocation" id="41ee4394-c965-4f90-b067-eea2dd3d4468"><con:settings/><con:config service="http://maps.googleapis.com" resourcePath="/maps/api/geocode/json" methodName="Json 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="searchLocation" id="e1ba0aaf-5343-4fbb-a057-ccd098c57b93" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://maps.googleapis.com</con:endpoint><con:request/><con:originalUri>http://maps.googleapis.com/maps/api/geocode/json</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="address" value="London" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>address</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="59fc7a36-b7ad-4f09-816b-bb671afcd446" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC05-Read Data from Excel Sheet" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script-Read Data From File" id="cafbbc43-5593-4387-b68a-a0978e73acc9"><con:settings/><con:config><script>import groovy.sql.Sql

String sqlStmt='SELCT * FROM BLZ_DATA'
def dataBaseUrl='jdbc:mysql://localhost:3306/?userroot=&amp;password=root'
def user='root'
def pass='root'
def driverName='com.mysql.jdbc.Driver'
def sql = Sql.newInstance(databaseUrl,user,pass,driverName)</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9a54e878-d35b-40e4-91a0-c4677a884e1e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC06-Groovy Script-SQL" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script-SQL" id="759e5dff-7486-45f3-ad70-8da43c6cd680"><con:settings/><con:config><script>def filePath = 'C:\\Users\\ab42596\\Desktop\\SoapUI Project\\blz-service-data.txt' //Note:Replace the file before executing
File file = new File(filePath)
//Loop through the content of file and pring them on log window.
def blz,bezeichnung,ort,plz,bic
file.eachLine{
	line->
	log.info line
	def lineData =  line.split(',')
	/**
	 * 55010111,SEB,ESSEDE5F550,Mainz a Rhein,55116
	 * lineData = ['55010111','SEB','ESSEDE5F550','Mainz a Rhein','55116']
	 */
	 blz= lineData[0] // blz code
	 bezeichnung = lineData[1]
	 bic = lineData[2]
	 ort = lineData[3]
	 plz =  lineData[4]
	 log.warn "blz = $blz , bezeichnung = $bezeichnung ,bic = $bic ,ort = $ort , plz = $plz"

}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9245f71d-5d6f-4454-824c-ed33010cc852" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC07-Groovy Script-Methods" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Groovy Script-Methods" id="35c066b0-4620-4630-a639-44ceccd59d20"><con:settings/><con:config><script>def intaddNumbers(int a , int b)
{
	return a+b
}

int result

result = intaddNumbers(10,20)
log.info "$result"
result = intaddNumbers(20,20)
log.info "$result"</script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script-Part 2" id="5d31d4c3-d2b7-4e56-88ee-256cd61a5cbc"><con:settings/><con:config><script>String grade
boolean isPassed
isPassed=true
grade = 'A'

printExamResult(isPassed,grade)


def void printExamResult(boolean isPassed,String grade){
if(isPassed== true)
{
	log.info 'Congrats'
printGradeMessage(grade)
}
else{
	log.error 'Better luck next time'
}

}

def void printGradeMessage(String grade){

if(grade=='A')
{
log.info 'Car'	
}
else if(grade=='B')
{
log.info 'Bike'	
}
else{
	log.info 'You got nothing'
}
}</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer><con:oAuth2Profile><con:name>Profile 1</con:name><con:accessToken>1233533yjjukillololtil987665467</con:accessToken><con:accessTokenPosition>HEADER</con:accessTokenPosition><con:oAuth2Flow>AUTHORIZATION_CODE_GRANT</con:oAuth2Flow><con:refreshAccessTokenMethod>AUTOMATIC</con:refreshAccessTokenMethod><con:accessTokenStatus>UNKNOWN</con:accessTokenStatus><con:accessTokenStartingStatus>ENTERED_MANUALLY</con:accessTokenStartingStatus><con:manualAccessTokenExpirationTimeUnit>SECONDS</con:manualAccessTokenExpirationTimeUnit></con:oAuth2Profile></con:oAuth2ProfileContainer><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>